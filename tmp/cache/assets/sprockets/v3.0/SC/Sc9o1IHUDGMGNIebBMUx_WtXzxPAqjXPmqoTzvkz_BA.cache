I"2(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Teaspoon.Jasmine2.Fixture = (function(superClass) {
    extend(Fixture, superClass);

    function Fixture() {
      return Fixture.__super__.constructor.apply(this, arguments);
    }

    Fixture.load = function() {
      var args;
      args = arguments;
      this.env().beforeEach((function(_this) {
        return function() {
          return fixture.__super__.constructor.load.apply(_this, args);
        };
      })(this));
      this.env().afterEach((function(_this) {
        return function() {
          return _this.cleanup();
        };
      })(this));
      return Fixture.__super__.constructor.load.apply(this, arguments);
    };

    Fixture.set = function() {
      var args;
      args = arguments;
      this.env().beforeEach((function(_this) {
        return function() {
          return fixture.__super__.constructor.set.apply(_this, args);
        };
      })(this));
      this.env().afterEach((function(_this) {
        return function() {
          return _this.cleanup();
        };
      })(this));
      return Fixture.__super__.constructor.set.apply(this, arguments);
    };

    Fixture.env = function() {
      return window.jasmine.getEnv();
    };

    return Fixture;

  })(Teaspoon.Fixture);

}).call(this);
:ET